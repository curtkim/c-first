// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stringdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stringdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stringdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stringdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stringdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stringdb_2eproto;
namespace stringdb {
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Request_RequestCountValues;
class Request_RequestCountValuesDefaultTypeInternal;
extern Request_RequestCountValuesDefaultTypeInternal _Request_RequestCountValues_default_instance_;
class Request_RequestGetValue;
class Request_RequestGetValueDefaultTypeInternal;
extern Request_RequestGetValueDefaultTypeInternal _Request_RequestGetValue_default_instance_;
class Request_RequestSetValue;
class Request_RequestSetValueDefaultTypeInternal;
extern Request_RequestSetValueDefaultTypeInternal _Request_RequestSetValue_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace stringdb
PROTOBUF_NAMESPACE_OPEN
template<> ::stringdb::Request* Arena::CreateMaybeMessage<::stringdb::Request>(Arena*);
template<> ::stringdb::Request_RequestCountValues* Arena::CreateMaybeMessage<::stringdb::Request_RequestCountValues>(Arena*);
template<> ::stringdb::Request_RequestGetValue* Arena::CreateMaybeMessage<::stringdb::Request_RequestGetValue>(Arena*);
template<> ::stringdb::Request_RequestSetValue* Arena::CreateMaybeMessage<::stringdb::Request_RequestSetValue>(Arena*);
template<> ::stringdb::Response* Arena::CreateMaybeMessage<::stringdb::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stringdb {

enum Request_RequestType : int {
  Request_RequestType_GET_VALUE = 1,
  Request_RequestType_SET_VALUE = 2,
  Request_RequestType_COUNT_VALUES = 3
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_GET_VALUE;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_COUNT_VALUES;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    const std::string& name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
// ===================================================================

class Request_RequestGetValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stringdb.Request.RequestGetValue) */ {
 public:
  Request_RequestGetValue();
  virtual ~Request_RequestGetValue();

  Request_RequestGetValue(const Request_RequestGetValue& from);
  Request_RequestGetValue(Request_RequestGetValue&& from) noexcept
    : Request_RequestGetValue() {
    *this = ::std::move(from);
  }

  inline Request_RequestGetValue& operator=(const Request_RequestGetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_RequestGetValue& operator=(Request_RequestGetValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_RequestGetValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_RequestGetValue* internal_default_instance() {
    return reinterpret_cast<const Request_RequestGetValue*>(
               &_Request_RequestGetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Request_RequestGetValue& a, Request_RequestGetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_RequestGetValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_RequestGetValue* New() const final {
    return CreateMaybeMessage<Request_RequestGetValue>(nullptr);
  }

  Request_RequestGetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_RequestGetValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_RequestGetValue& from);
  void MergeFrom(const Request_RequestGetValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_RequestGetValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stringdb.Request.RequestGetValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stringdb_2eproto);
    return ::descriptor_table_stringdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // required string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:stringdb.Request.RequestGetValue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_stringdb_2eproto;
};
// -------------------------------------------------------------------

class Request_RequestSetValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stringdb.Request.RequestSetValue) */ {
 public:
  Request_RequestSetValue();
  virtual ~Request_RequestSetValue();

  Request_RequestSetValue(const Request_RequestSetValue& from);
  Request_RequestSetValue(Request_RequestSetValue&& from) noexcept
    : Request_RequestSetValue() {
    *this = ::std::move(from);
  }

  inline Request_RequestSetValue& operator=(const Request_RequestSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_RequestSetValue& operator=(Request_RequestSetValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_RequestSetValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_RequestSetValue* internal_default_instance() {
    return reinterpret_cast<const Request_RequestSetValue*>(
               &_Request_RequestSetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Request_RequestSetValue& a, Request_RequestSetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_RequestSetValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_RequestSetValue* New() const final {
    return CreateMaybeMessage<Request_RequestSetValue>(nullptr);
  }

  Request_RequestSetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_RequestSetValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_RequestSetValue& from);
  void MergeFrom(const Request_RequestSetValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_RequestSetValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stringdb.Request.RequestSetValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stringdb_2eproto);
    return ::descriptor_table_stringdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:stringdb.Request.RequestSetValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_stringdb_2eproto;
};
// -------------------------------------------------------------------

class Request_RequestCountValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stringdb.Request.RequestCountValues) */ {
 public:
  Request_RequestCountValues();
  virtual ~Request_RequestCountValues();

  Request_RequestCountValues(const Request_RequestCountValues& from);
  Request_RequestCountValues(Request_RequestCountValues&& from) noexcept
    : Request_RequestCountValues() {
    *this = ::std::move(from);
  }

  inline Request_RequestCountValues& operator=(const Request_RequestCountValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request_RequestCountValues& operator=(Request_RequestCountValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request_RequestCountValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request_RequestCountValues* internal_default_instance() {
    return reinterpret_cast<const Request_RequestCountValues*>(
               &_Request_RequestCountValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request_RequestCountValues& a, Request_RequestCountValues& b) {
    a.Swap(&b);
  }
  inline void Swap(Request_RequestCountValues* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request_RequestCountValues* New() const final {
    return CreateMaybeMessage<Request_RequestCountValues>(nullptr);
  }

  Request_RequestCountValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request_RequestCountValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request_RequestCountValues& from);
  void MergeFrom(const Request_RequestCountValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request_RequestCountValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stringdb.Request.RequestCountValues";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stringdb_2eproto);
    return ::descriptor_table_stringdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:stringdb.Request.RequestCountValues)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stringdb_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stringdb.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stringdb.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stringdb_2eproto);
    return ::descriptor_table_stringdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_RequestGetValue RequestGetValue;
  typedef Request_RequestSetValue RequestSetValue;
  typedef Request_RequestCountValues RequestCountValues;

  typedef Request_RequestType RequestType;
  static constexpr RequestType GET_VALUE =
    Request_RequestType_GET_VALUE;
  static constexpr RequestType SET_VALUE =
    Request_RequestType_SET_VALUE;
  static constexpr RequestType COUNT_VALUES =
    Request_RequestType_COUNT_VALUES;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(const std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestGetValueFieldNumber = 21,
    kRequestSetValueFieldNumber = 22,
    kRequestCountValuesFieldNumber = 23,
    kTypeFieldNumber = 1,
  };
  // optional .stringdb.Request.RequestGetValue request_get_value = 21;
  bool has_request_get_value() const;
  void clear_request_get_value();
  const ::stringdb::Request_RequestGetValue& request_get_value() const;
  ::stringdb::Request_RequestGetValue* release_request_get_value();
  ::stringdb::Request_RequestGetValue* mutable_request_get_value();
  void set_allocated_request_get_value(::stringdb::Request_RequestGetValue* request_get_value);

  // optional .stringdb.Request.RequestSetValue request_set_value = 22;
  bool has_request_set_value() const;
  void clear_request_set_value();
  const ::stringdb::Request_RequestSetValue& request_set_value() const;
  ::stringdb::Request_RequestSetValue* release_request_set_value();
  ::stringdb::Request_RequestSetValue* mutable_request_set_value();
  void set_allocated_request_set_value(::stringdb::Request_RequestSetValue* request_set_value);

  // optional .stringdb.Request.RequestCountValues request_count_values = 23;
  bool has_request_count_values() const;
  void clear_request_count_values();
  const ::stringdb::Request_RequestCountValues& request_count_values() const;
  ::stringdb::Request_RequestCountValues* release_request_count_values();
  ::stringdb::Request_RequestCountValues* mutable_request_count_values();
  void set_allocated_request_count_values(::stringdb::Request_RequestCountValues* request_count_values);

  // required .stringdb.Request.RequestType type = 1;
  bool has_type() const;
  void clear_type();
  ::stringdb::Request_RequestType type() const;
  void set_type(::stringdb::Request_RequestType value);

  // @@protoc_insertion_point(class_scope:stringdb.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::stringdb::Request_RequestGetValue* request_get_value_;
  ::stringdb::Request_RequestSetValue* request_set_value_;
  ::stringdb::Request_RequestCountValues* request_count_values_;
  int type_;
  friend struct ::TableStruct_stringdb_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stringdb.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stringdb.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stringdb_2eproto);
    return ::descriptor_table_stringdb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // required string value = 1;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:stringdb.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_stringdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request_RequestGetValue

// required string key = 1;
inline bool Request_RequestGetValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_RequestGetValue::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_RequestGetValue::key() const {
  // @@protoc_insertion_point(field_get:stringdb.Request.RequestGetValue.key)
  return key_.GetNoArena();
}
inline void Request_RequestGetValue::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stringdb.Request.RequestGetValue.key)
}
inline void Request_RequestGetValue::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stringdb.Request.RequestGetValue.key)
}
inline void Request_RequestGetValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stringdb.Request.RequestGetValue.key)
}
inline void Request_RequestGetValue::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stringdb.Request.RequestGetValue.key)
}
inline std::string* Request_RequestGetValue::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:stringdb.Request.RequestGetValue.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_RequestGetValue::release_key() {
  // @@protoc_insertion_point(field_release:stringdb.Request.RequestGetValue.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_RequestGetValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.RequestGetValue.key)
}

// -------------------------------------------------------------------

// Request_RequestSetValue

// required string key = 1;
inline bool Request_RequestSetValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_RequestSetValue::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request_RequestSetValue::key() const {
  // @@protoc_insertion_point(field_get:stringdb.Request.RequestSetValue.key)
  return key_.GetNoArena();
}
inline void Request_RequestSetValue::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stringdb.Request.RequestSetValue.key)
}
inline void Request_RequestSetValue::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stringdb.Request.RequestSetValue.key)
}
inline void Request_RequestSetValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stringdb.Request.RequestSetValue.key)
}
inline void Request_RequestSetValue::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stringdb.Request.RequestSetValue.key)
}
inline std::string* Request_RequestSetValue::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:stringdb.Request.RequestSetValue.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_RequestSetValue::release_key() {
  // @@protoc_insertion_point(field_release:stringdb.Request.RequestSetValue.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_RequestSetValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.RequestSetValue.key)
}

// required string value = 2;
inline bool Request_RequestSetValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_RequestSetValue::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Request_RequestSetValue::value() const {
  // @@protoc_insertion_point(field_get:stringdb.Request.RequestSetValue.value)
  return value_.GetNoArena();
}
inline void Request_RequestSetValue::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stringdb.Request.RequestSetValue.value)
}
inline void Request_RequestSetValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stringdb.Request.RequestSetValue.value)
}
inline void Request_RequestSetValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stringdb.Request.RequestSetValue.value)
}
inline void Request_RequestSetValue::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stringdb.Request.RequestSetValue.value)
}
inline std::string* Request_RequestSetValue::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:stringdb.Request.RequestSetValue.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Request_RequestSetValue::release_value() {
  // @@protoc_insertion_point(field_release:stringdb.Request.RequestSetValue.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Request_RequestSetValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.RequestSetValue.value)
}

// -------------------------------------------------------------------

// Request_RequestCountValues

// -------------------------------------------------------------------

// Request

// required .stringdb.Request.RequestType type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::stringdb::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:stringdb.Request.type)
  return static_cast< ::stringdb::Request_RequestType >(type_);
}
inline void Request::set_type(::stringdb::Request_RequestType value) {
  assert(::stringdb::Request_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
  // @@protoc_insertion_point(field_set:stringdb.Request.type)
}

// optional .stringdb.Request.RequestGetValue request_get_value = 21;
inline bool Request::has_request_get_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_request_get_value() {
  if (request_get_value_ != nullptr) request_get_value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::stringdb::Request_RequestGetValue& Request::request_get_value() const {
  const ::stringdb::Request_RequestGetValue* p = request_get_value_;
  // @@protoc_insertion_point(field_get:stringdb.Request.request_get_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::stringdb::Request_RequestGetValue*>(
      &::stringdb::_Request_RequestGetValue_default_instance_);
}
inline ::stringdb::Request_RequestGetValue* Request::release_request_get_value() {
  // @@protoc_insertion_point(field_release:stringdb.Request.request_get_value)
  _has_bits_[0] &= ~0x00000001u;
  ::stringdb::Request_RequestGetValue* temp = request_get_value_;
  request_get_value_ = nullptr;
  return temp;
}
inline ::stringdb::Request_RequestGetValue* Request::mutable_request_get_value() {
  _has_bits_[0] |= 0x00000001u;
  if (request_get_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::stringdb::Request_RequestGetValue>(GetArenaNoVirtual());
    request_get_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stringdb.Request.request_get_value)
  return request_get_value_;
}
inline void Request::set_allocated_request_get_value(::stringdb::Request_RequestGetValue* request_get_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_get_value_;
  }
  if (request_get_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_get_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_get_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_get_value_ = request_get_value;
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.request_get_value)
}

// optional .stringdb.Request.RequestSetValue request_set_value = 22;
inline bool Request::has_request_set_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_request_set_value() {
  if (request_set_value_ != nullptr) request_set_value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::stringdb::Request_RequestSetValue& Request::request_set_value() const {
  const ::stringdb::Request_RequestSetValue* p = request_set_value_;
  // @@protoc_insertion_point(field_get:stringdb.Request.request_set_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::stringdb::Request_RequestSetValue*>(
      &::stringdb::_Request_RequestSetValue_default_instance_);
}
inline ::stringdb::Request_RequestSetValue* Request::release_request_set_value() {
  // @@protoc_insertion_point(field_release:stringdb.Request.request_set_value)
  _has_bits_[0] &= ~0x00000002u;
  ::stringdb::Request_RequestSetValue* temp = request_set_value_;
  request_set_value_ = nullptr;
  return temp;
}
inline ::stringdb::Request_RequestSetValue* Request::mutable_request_set_value() {
  _has_bits_[0] |= 0x00000002u;
  if (request_set_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::stringdb::Request_RequestSetValue>(GetArenaNoVirtual());
    request_set_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stringdb.Request.request_set_value)
  return request_set_value_;
}
inline void Request::set_allocated_request_set_value(::stringdb::Request_RequestSetValue* request_set_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_set_value_;
  }
  if (request_set_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_set_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_set_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_set_value_ = request_set_value;
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.request_set_value)
}

// optional .stringdb.Request.RequestCountValues request_count_values = 23;
inline bool Request::has_request_count_values() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::clear_request_count_values() {
  if (request_count_values_ != nullptr) request_count_values_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::stringdb::Request_RequestCountValues& Request::request_count_values() const {
  const ::stringdb::Request_RequestCountValues* p = request_count_values_;
  // @@protoc_insertion_point(field_get:stringdb.Request.request_count_values)
  return p != nullptr ? *p : *reinterpret_cast<const ::stringdb::Request_RequestCountValues*>(
      &::stringdb::_Request_RequestCountValues_default_instance_);
}
inline ::stringdb::Request_RequestCountValues* Request::release_request_count_values() {
  // @@protoc_insertion_point(field_release:stringdb.Request.request_count_values)
  _has_bits_[0] &= ~0x00000004u;
  ::stringdb::Request_RequestCountValues* temp = request_count_values_;
  request_count_values_ = nullptr;
  return temp;
}
inline ::stringdb::Request_RequestCountValues* Request::mutable_request_count_values() {
  _has_bits_[0] |= 0x00000004u;
  if (request_count_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::stringdb::Request_RequestCountValues>(GetArenaNoVirtual());
    request_count_values_ = p;
  }
  // @@protoc_insertion_point(field_mutable:stringdb.Request.request_count_values)
  return request_count_values_;
}
inline void Request::set_allocated_request_count_values(::stringdb::Request_RequestCountValues* request_count_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_count_values_;
  }
  if (request_count_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_count_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_count_values, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  request_count_values_ = request_count_values;
  // @@protoc_insertion_point(field_set_allocated:stringdb.Request.request_count_values)
}

// -------------------------------------------------------------------

// Response

// required string value = 1;
inline bool Response::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Response::value() const {
  // @@protoc_insertion_point(field_get:stringdb.Response.value)
  return value_.GetNoArena();
}
inline void Response::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:stringdb.Response.value)
}
inline void Response::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:stringdb.Response.value)
}
inline void Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:stringdb.Response.value)
}
inline void Response::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:stringdb.Response.value)
}
inline std::string* Response::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:stringdb.Response.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_value() {
  // @@protoc_insertion_point(field_release:stringdb.Response.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:stringdb.Response.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stringdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::stringdb::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::stringdb::Request_RequestType>() {
  return ::stringdb::Request_RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stringdb_2eproto
